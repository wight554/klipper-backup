############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> MMU/ERCF MCUs are called "mmu" 

# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
variable_startprint_actions: "bed_soak", "chamber_soak", "extruder_preheating", "tilt_calib", "bedmesh", "extruder_heating", "custom1", "primeline"
gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
[heater_bed]
control: pid
pid_version: 1
pid_target: 100.00
pid_tolerance: 0.0200
control: pid
pid_kp: 44.599
pid_ki: 0.891
pid_kd: 557.858
sensor_type: ATC Semitec 104NT-4-R025H42G
pullup_resistor: 2200

[extruder]

# rapido

# 5015
#control: mpc
#block_heat_capacity: 13.5971
#sensor_responsiveness: 0.111423
#ambient_transfer: 0.0872926
#fan_ambient_transfer: 0.0872926, 0.0922456, 0.100801, 0.108231, 0.112219, 0.116745, 0.121083, 0.121865, 0.124051, 0.124925, 0.128392

#4010
#control: mpc
#block_heat_capacity: 15.7668
#sensor_responsiveness: 0.121392
#ambient_transfer: 0.0982590
#fan_ambient_transfer: 0.098259, 0.112492, 0.12123, 0.133667, 0.13853, 0.145477, 0.149295, 0.154854, 0.156443, 0.162664, 0.164542

cooling_fan: fan
ambient_temp_sensor: temperature_sensor Chamber

# rapido
heater_power: 64

# dragon
# heater_power: 70


# rapido hf
# control: mpc
# block_heat_capacity: 23.2413
# sensor_responsiveness: 0.0791073
# ambient_transfer: 0.104475
# fan_ambient_transfer: 0.104475, 0.114955, 0.120062, 0.124088, 0.131036, 0.130622, 0.133814, 0.130294, 0.137677, 0.137976, 0.138717

# nozzle_diameter: 0.4

# rapido uhf
control: mpc
block_heat_capacity: 15.7526
sensor_responsiveness: 0.100251
ambient_transfer: 0.0984092
fan_ambient_transfer: 0.0984092, 0.107447, 0.114862, 0.12126, 0.127345, 0.128405, 0.128044, 0.132944, 0.133974, 0.133161, 0.139175

#pid_version: 1
#pid_target: 250.00
#pid_tolerance: 0.0200
#control: pid
#pid_kp: 16.592
#pid_ki: 1.001
#pid_kd: 68.756

#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.

# [stepper_z3]
# dir_pin: !Z3_DIR


#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
# [probe]
# x_offset: -1.95 # negative = left of the nozzle
# y_offset: 38.15 # negative = in front of of the nozzle
# drop_first_result: True
#   Set to `True` will probe one extra time and remove the first
#   sample from calculation. This can improve probe accuracy for
#   printers that have an outlier first sample.

[include motors.cfg]
#[include z_calibration.cfg]

#[stepper_x]
#dir_pin: !X_DIR

#[stepper_x]
#dir_pin: !X_DIR

# [z_calibration]
# # Physical Z endstop pin position
# nozzle_xy_position: 200,236
# # Probe switch position on physical endstop
# switch_xy_position: 195,204
# # Switch offset (default D2F-5: 0.5mm and SSG-5H: 0.7mm)
# # Smaller number means higher nozzle to the PEI
# switch_offset: 0.275

[printer]
max_velocity: 1000
max_accel: 50000
minimum_cruise_ratio: 0
square_corner_velocity: 15

[skew_correction]

[skew_correction default]
xy_skew: -0.003120761785085667
xz_skew: 0.0
yz_skew: 0.0

[change_nozzle]

[extruder]
sensor_type: MAX31865
max_temp: 350
min_extrude_temp: 10

# gear_ratio: 45:8, 37:16
# rotation_distance: 56.227912

max_extrude_only_distance: 1000.0

# sherpa
# dir_pin: !toolhead:E_DIR
# rotation_distance: 22.54 #for 5mm Shaft Driven Bondtech gearsets
# gear_ratio: 50:8 #for sherpa mini 8t motor

# max_extrude_only_velocity: 120
# max_extrude_only_accel: 2200
# instantaneous_corner_velocity: 4

# protoxtruder
# dir_pin: toolhead:E_DIR
# rotation_distance: 54.297  # Re-calibrate your own value
# gear_ratio: 44:8, 37:17

# max_extrude_only_velocity: 120
# max_extrude_only_accel: 2500
# instantaneous_corner_velocity: 5


# papilio
# dir_pin: !toolhead:E_DIR
# gear_ratio: 45:8, 37:16
# rotation_distance: 56.227912

# max_extrude_only_velocity: 120
# max_extrude_only_accel: 2500
# instantaneous_corner_velocity: 5

# lowboi
dir_pin: toolhead:E_DIR
gear_ratio: 15:1
rotation_distance: 40.4

max_extrude_only_velocity: 120
max_extrude_only_accel: 2500
instantaneous_corner_velocity: 5

# bev2
# pressure_advance_smooth_extruding_moves: False
# pressure_advance_smooth_extrude_only_moves: False

[input_shaper]
shaper_freq_x: 82.8  # frequency for the X mark of the test model
shaper_freq_y: 85.4  # frequency for the Y mark of the test model
shaper_type_x: mzv
shaper_type_y: ei
damping_ratio_x: 0.0335 # damping ratio for the X axis
damping_ratio_y: 0.0687 # damping ratio for the Y axis

# bev2
enabled_extruders: extruder

[screws_tilt_adjust]
screw3: 27,-10 # y = -6.5
screw3_name: Front left
screw2: 177,-10 # y = -6.5
screw2_name: Front right
screw1: 177,140
screw1_name: Back right
screw4: 27,140
screw4_name: Back left
screw_thread: CW-M3
horizontal_move_z: 15
speed: 300

[gcode_macro _WAIT_CHAMBER_TEMP]
# This macro is needed to allow klipper populate a new value in the printer[...].temperature variable
# as each variables are populated only once at the beginning of every macro call
gcode:
    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}

    {% if chamber_sensor_enabled %}
        {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
        {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
        {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

        {% if CURRENT_TEMP <= SETPOINT_TEMP %}
            RESPOND MSG="Heating up the chamber : {CURRENT_TEMP}/{SETPOINT_TEMP}"
            # G4 P{60000 * 1} # wait a minute and check again if called in a loop
            
            
            M106 S204

            # Instead of waiting a minute using dwell, shake bed for a minute
            {% set move_distance = 50|int %}
            {% set move_speed = 100|int %}

            # Small pattern at center
            # Find Y center point
            {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
            
            # Set small pattern box around center point
            {% set y_center_min = y_center - (move_distance/2) %}
            {% set y_center_max = y_center + (move_distance/2) %}

            # Approximate calculation of how many iterations can be do in 1 minute
            {% set move_iterations =  (60 / ((move_distance * 2) / move_speed))|int|round(0)|int %}
            
            {% for i in range(move_iterations) %}
                G0 Y{y_center_min} F{move_speed * 60}
                G0 Y{y_center_max} F{move_speed * 60}
            {% endfor %} 

            M107
        {% endif %}
    {% endif %}


[gcode_macro _USER_VARIABLES]
variable_sensorless_homing_enabled: True
gcode:


[stepper_x]
homing_speed: 160
endstop_pin: tmc5160_stepper_x:virtual_endstop

[tmc5160 stepper_x]
diag1_pin: ^!X_STOP

[stepper_y]
homing_speed: 40
# endstop_pin: tmc2240_stepper_y:virtual_endstop

# [tmc2240 stepper_y]
# diag0_pin: ^!Y_STOP

[controller_fan controller_fan]
tachometer_pin: PC5


# [axis_twist_compensation]
# speed: 10                                                  #   The speed (in mm/s) of non-probing moves during the calibration.                                                  #   The default is 50.
# horizontal_move_z: 20
# #   The height (in mm) that the head should be commanded to move to                                                   #   just prior to starting a probe operation. The default is 5.                                                       
# calibrate_start_x: 17.5 #21.95
# #   Defines the minimum X coordinate of the calibration
# #   This should be the X coordinate that positions the nozzle at the starting
# #   calibration position. This parameter must be provided. 
# calibrate_end_x: 217.5 #201.95                           #   Defines the maximum X coordinate of the calibration
# #   This should be the X coordinate that positions the nozzle at the ending
# #   calibration position. This parameter must be provided.
# calibrate_y: 117.5
# #   Defines the Y coordinate of the calibration
# #   This should be the Y coordinate that positions the nozzle during the
# #   calibration process. This parameter must be provided and is recommended to
# #   be near the center of the bed

# [axis_twist_compensation]
# #z_compensations: 0.071696, 0.044196, 0.095446, -0.074554, -0.065179, -0.042054, -0.029554
# #compensation_start_x: 5.0
# #compensation_start_y: 230.0 # compensation_end_x - klipper bug

# #z_compensations: 0.069375, 0.038750, 0.011875, -0.028750, -0.082500, -0.074375, 0.065625
# #compensation_start_x: 5.0
# #compensation_start_y: 230.0

# [axis_twist_compensation]
# z_compensations: 0.093500, 0.017875, -0.022125, -0.045875, -0.043375
# compensation_start_x: 17.5
# compensation_start_y: 217.5

#[stepper_x]
#rotation_distance: 32

# [gcode_macro AXIS_TWIST_COMPENSATION_CALIBRATE]
# rename_existing: AXIS_TWIST_COMPENSATION_CALIBRATE_BASE
# gcode:
#     {% if not 'xyz' in printer.toolhead.homed_axes %}
#         G28
#     {% endif %}
#     ACTIVATE_PROBE
#     AXIS_TWIST_COMPENSATION_CALIBRATE_BASE SAMPLE_COUNT=5

[include macros/calibration/test_speed.cfg]

[temperature_sensor Chamber]
sensor_type: ATC Semitec 104NT-4-R025H42G
pullup_resistor: 2200

# [shaketune]
# result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
# number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
# keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
# show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
# timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.


[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ABS+"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-T"     : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ABS-GF"    : ( 1.15, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=🔥 MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=🔥 MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}

[gcode_macro _MODULE_CUSTOM1]
gcode:
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}


[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description: Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode:
    #
    # PARAMETERS
    #
    {% set do_raft = params.DO_RAFT|default(1)|int %} # whether to print a raft or not
    {% set do_retract = params.DO_RECTRACT|default(0)|int %} # whether to enable retract/unrectract on travel moves
    {% set print_size = params.PRINT_SIZE|default(40)|int %} # size of the printed object on the build plate
    {% set print_height = params.HEIGHT|default(15)|int %} # height of the printed object
    {% set corner_radius = params.CORNER_RADIUS|default(8)|int %} # radius of the corners to smooth the shell and toolpath
    {% set number_of_perimeters = params.PERIMETERS|default(2)|int %} # number of perimeters to print the shell
    {% set fan_speed = params.FAN_SPEED|default(20)|int %} # part cooling fan speed in percent (0-100)

    {% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %} # extrusion multiplier for the shell
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %} # filament diameter
    {% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %} # extrusion width goal for one line
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %} # layer height for the print

    {% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %} # how much to retract when traveling between print moves
    {% set initial_purge = params.PURGE_MM|default(1)|int %} # mm of filament to purge before printing. set to 0 to disable
    {% set z_hop_height  = 2 * layer_height %}

    {% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %} # print feedrate
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between print moves
    {% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %} # print feedrate for printing raft
    {% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %} # z axis travel feedrate
    {% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %} # retract and deretract feedrate

    #
    # COMPUTED VALUES
    #
    {% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %} # computed E factor (similar to Slic3r/PrusaSlicer/SuperSlicer)
    {% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %} # line spacing during the print
    {% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %} # theoric shell thickness

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set x_start = max_x / 2 - print_size / 2 %}
    {% set y_start = max_y / 2 - print_size / 2 %}
    {% set x_end = x_start + print_size %}
    {% set y_end = y_start + print_size %}

    {% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
    {% set raft_size = num_raft_lines * spacing %}

    #
    # STARTING...
    #
    {action_respond_info("")}
    {action_respond_info("Starting extrusion flow calibration print")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}
    {action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}
    {action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}
    {action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}
    {action_respond_info("")}
    {action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}
    {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

    #
    # set variables for later computation
    #
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}

    #
    # purging before raft
    #
    G90
    M83
    G92 E0.0
    G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel} # move at the start position to do a purge line

    G91 # use relative coordinates for the prime line
    G1 E{initial_purge} F{5 * 60}
    G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2} # print prime line
    G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2} # move to next line
    G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2} # print second prime line

    G1 E-{retract_length} F{feedrate_retract} # retract
    G0 Z{z_hop_height} F{feedrate_z} # z-hop

    G90 # back to absolute coordinates
    G0 X{x_start} Y{y_start} F{feedrate_travel} # move to start position
    G1 Z{layer_height} F{feedrate_z} # move to print height
    G1 E{retract_length} F{feedrate_retract} # unretract

    # set extrude_factor
    M221 S{e_multiplier * 100}

    #
    # print the raft
    #
    {% if do_raft == 1 %}
        G91 # use relative coordinates for the raft
        {% for curr_raft_line in range(1, num_raft_lines + 2) %}
            # print a raft line with alternating direction
            G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}

            # spacing move
            {% if not loop.last %}
                G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
            {% endif %}
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract} # retract
        G0 Z{z_hop_height} F{feedrate_z} # z-hop
        G90 # back to absolute coordinates
    {% endif %}

    #
    # print the shell
    #
    G90
    M106 S{fan_speed * 255 / 100}

    # for each layer
    {% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
        G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel} # move to XY start position
        G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z} # move to Z start position

        # print one layer of the shell (in a for loop to do all the perimeters of one layer)
        {% for perim_num in range(number_of_perimeters) %}
            # compute values for the current perimeter (offset and radius)
            {% set perim_offset = perim_num * spacing %}
            {% set perim_radius = corner_radius - (perim_num * spacing) %}
            
            # start position of the current perimeter
            G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
            {% if do_retract == 1 %}
                G1 E{retract_length} F{feedrate_retract} # unretract
            {% endif %}

            # print the perimeter without corner radius, accounting for precise segment lengths
            G1 X{x_end - perim_offset} Y{y_start + perim_offset} E{print_size * e_per_mm} F{feedrate_print}
            G1 X{x_end - perim_offset} Y{y_end - perim_offset} E{print_size * e_per_mm} F{feedrate_print}
            G1 X{x_start + perim_offset} Y{y_end - perim_offset} E{print_size * e_per_mm}  F{feedrate_print}
            G1 X{x_start + perim_offset} Y{y_start + perim_offset} E{print_size * e_per_mm} F{feedrate_print}

            {% if do_retract == 1 %}
                G1 E-{retract_length} F{feedrate_retract} # retract
            {% endif %}
        {% endfor %}

        {% if do_retract == 1 %}
            G91
            G0 Z{z_hop_height} F{feedrate_z}
            G90 
        {% endif %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}
    G91
    G0 Z20 F{feedrate_travel}

    RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION


[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description: Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode:
    {% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %} # extrusion multiplier used for the calibration print
    {% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %} # theorical shell thickness
    {% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %} # measured shell thickness on the calibration print

    # if there is no OLD_EXTRUSION_MULTIPLIER passed as param, get the one from the last print calib run
    {% if evalue == 0.0 %}
        {% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_evalue == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_evalue = last_evalue %}
            {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
        {% endif %}
    {% else %}
        {% set final_evalue = evalue %}
        {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
    {% endif %}

    # similarly, if there is no THEORICAL_THICKNESS passed as param, get the one from the last print calib run
    {% if theorical_thickness == 0.0 %}
        {% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}

        # then, if there is also no evalue saved from the last run, alert user
        {% if last_shell_thickness == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_theorical_thickness = last_shell_thickness %}
            {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
        {% endif %}
    {% else %}
        {% set final_theorical_thickness = theorical_thickness %}
        {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
    {% endif %}

    # use the measured thickness from the user to compute a new flow value
    {% if measured_thickness == 0.0 %}
        {action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
        {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
        {action_raise_error("not enough data to perform the computation of the new flow !")}
    {% else %}
        {% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
        {action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
        {action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
        {action_respond_info("")}
    {% endif %}

[include reshelper.cfg]

[danger_options]
allow_plugin_override: True

#[include PIS.cfg]


# [ringing_test]
# size: 50
# #   X-Y Size of tower footprint (mm)
# height: 60
# #   Height of of tower (mm)
# band: 5
# #   Height for each ringing step (mm)
# perimeters: 2
# #   Number of perimeters to be printed for the tower
# velocity: 100
# #   Is the velocity one must use as V in a formula V * N / D when
# #   calculating the resonance frequency. N and D are the number of
# #   oscillations and the distance between them as usual:
# brim_velocity: 30
# #   Speed for brim printing in (mm/s)
# accel_start: 10000
# #   The acceleration of the start of the test
# accel_step: 0
# #   The increment of the acceleration every `band` (mm/s^2)
# layer_height: 0.2
# first_layer_height: 0.25
# filament_diameter: 1.75

# [delayed_gcode start_ringing_test]

# gcode:
#     {% set vars = printer["gcode_macro RUN_RINGING_TEST"] %}
#     # Add your start GCode here, for example:

#     START_PRINT EXTRUDER_TEMP={vars.hotend_temp} BED_TEMP={vars.bed_temp} MATERIAL=ABS SIZE=76.7348_76.7348_123.265_123.265 INITIAL_TOOL=0 CHAMBER=0 SOAK=0
#     # G28
#     # M190 S{vars.bed_temp}
#     # M109 S{vars.hotend_temp}
#     SET_PRESSURE_ADVANCE ADVANCE=0
#     SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
#     M106 S255
#     {% set flow_percent = vars.flow_rate|float * 100.0 %}
#     {% if flow_percent > 0 %}
#     M221 S{flow_percent}
#     {% endif %}
#     {% set layer_height = vars.nozzle * 0.5 %}
#     {% set first_layer_height = layer_height * 1.25 %}
#     PRINT_RINGING_TOWER {vars.rawparams} LAYER_HEIGHT={layer_height} FIRST_LAYER_HEIGHT={first_layer_height} FINAL_GCODE_ID=end_ringing_test

# [delayed_gcode end_ringing_test]
# gcode:
#     END_PRINT

# [gcode_macro RUN_RINGING_TEST]
# variable_bed_temp: -1
# variable_hotend_temp: -1
# variable_nozzle: -1
# variable_flow_rate: -1
# variable_rawparams: ''
# gcode:
#     # Fail early if the required parameters are not provided
#     {% if params.NOZZLE is not defined %}
#     {action_raise_error('NOZZLE= parameter must be provided')}
#     {% endif %}
#     {% if params.TARGET_TEMP is not defined %}
#     {action_raise_error('TARGET_TEMP= parameter must be provided')}
#     {% endif %}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=bed_temp VALUE={params.BED_TEMP|default(60)}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=hotend_temp VALUE={params.TARGET_TEMP}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=nozzle VALUE={params.NOZZLE}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=flow_rate VALUE={params.FLOW_RATE|default(-1)}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=rawparams VALUE="'{rawparams}'"
#     SAVE_GCODE_STATE NAME=RINGING_TEST_STATE
#     UPDATE_DELAYED_GCODE ID=start_ringing_test DURATION=0.01