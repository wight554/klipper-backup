############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> MMU/ERCF MCUs are called "mmu" 

# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
variable_startprint_actions: "bed_soak", "chamber_soak", "extruder_preheating", "tilt_calib", "bedmesh", "extruder_heating", "custom1", "primeline"
gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
[heater_bed]
control: pid
pid_version: 1
pid_target: 100.00
pid_tolerance: 0.0200
control: pid
pid_kp: 44.599
pid_ki: 0.891
pid_kd: 557.858
sensor_type: ATC Semitec 104NT-4-R025H42G
pullup_resistor: 2200

[extruder]
cooling_fan: fan
ambient_temp_sensor: temperature_sensor Chamber

# rapido
heater_power: 64
control: mpc
block_heat_capacity: 15.7526
sensor_responsiveness: 0.100251
ambient_transfer: 0.0984092
fan_ambient_transfer: 0.0984092, 0.107447, 0.114862, 0.12126, 0.127345, 0.128405, 0.128044, 0.132944, 0.133974, 0.133161, 0.139175


#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.

# [stepper_z3]
# dir_pin: !Z3_DIR


#-------------------------#
#   Probe Offsets         #
#-------------------------#

[include motors.cfg]

[printer]
max_velocity: 1000
max_accel: 50000
minimum_cruise_ratio: 0
square_corner_velocity: 15

[skew_correction]

[skew_correction default]
xy_skew: -0.003120761785085667
xz_skew: 0.0
yz_skew: 0.0

[change_nozzle]

[extruder]
sensor_type: MAX31865
max_temp: 350
min_extrude_temp: 10

# gear_ratio: 45:8, 37:16
# rotation_distance: 56.227912

max_extrude_only_distance: 1000.0

# sherpa
# dir_pin: !toolhead:E_DIR
# rotation_distance: 22.54 #for 5mm Shaft Driven Bondtech gearsets
# gear_ratio: 50:8 #for sherpa mini 8t motor

# max_extrude_only_velocity: 120
# max_extrude_only_accel: 2200
# instantaneous_corner_velocity: 4

# protoxtruder
# dir_pin: toolhead:E_DIR
# rotation_distance: 54.297  # Re-calibrate your own value
# gear_ratio: 44:8, 37:17

# max_extrude_only_velocity: 120
# max_extrude_only_accel: 2500
# instantaneous_corner_velocity: 5


# papilio
# dir_pin: !toolhead:E_DIR
# gear_ratio: 45:8, 37:16
# rotation_distance: 56.227912

# max_extrude_only_velocity: 120
# max_extrude_only_accel: 2500
# instantaneous_corner_velocity: 5

# lowboi
dir_pin: toolhead:E_DIR
gear_ratio: 15:1
rotation_distance: 40.4

max_extrude_only_velocity: 120
max_extrude_only_accel: 2500
instantaneous_corner_velocity: 5


[input_shaper]
shaper_freq_x: 82.8  # frequency for the X mark of the test model
shaper_freq_y: 85.4  # frequency for the Y mark of the test model
shaper_type_x: mzv
shaper_type_y: ei
damping_ratio_x: 0.0335 # damping ratio for the X axis
damping_ratio_y: 0.0687 # damping ratio for the Y axis

# bev2
enabled_extruders: extruder

[gcode_macro _WAIT_CHAMBER_TEMP]
# This macro is needed to allow klipper populate a new value in the printer[...].temperature variable
# as each variables are populated only once at the beginning of every macro call
gcode:
    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}

    {% if chamber_sensor_enabled %}
        {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
        {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
        {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

        {% if CURRENT_TEMP <= SETPOINT_TEMP %}
            RESPOND MSG="Heating up the chamber : {CURRENT_TEMP}/{SETPOINT_TEMP}"
            # G4 P{60000 * 1} # wait a minute and check again if called in a loop
            
            
            M106 S204

            # Instead of waiting a minute using dwell, shake bed for a minute
            {% set move_distance = 50|int %}
            {% set move_speed = 100|int %}

            # Small pattern at center
            # Find Y center point
            {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
            
            # Set small pattern box around center point
            {% set y_center_min = y_center - (move_distance/2) %}
            {% set y_center_max = y_center + (move_distance/2) %}

            # Approximate calculation of how many iterations can be do in 1 minute
            {% set move_iterations =  (60 / ((move_distance * 2) / move_speed))|int|round(0)|int %}
            
            {% for i in range(move_iterations) %}
                G0 Y{y_center_min} F{move_speed * 60}
                G0 Y{y_center_max} F{move_speed * 60}
            {% endfor %} 

            M107
        {% endif %}
    {% endif %}


[gcode_macro _USER_VARIABLES]
variable_sensorless_homing_enabled: True
gcode:


[stepper_x]
homing_speed: 160
endstop_pin: tmc5160_stepper_x:virtual_endstop

[tmc5160 stepper_x]
diag1_pin: ^!X_STOP

[stepper_y]
homing_speed: 40


[controller_fan controller_fan]
tachometer_pin: PC5


[include macros/calibration/test_speed.cfg]

[temperature_sensor Chamber]
sensor_type: ATC Semitec 104NT-4-R025H42G
pullup_resistor: 2200


[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ABS+"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-T"     : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ABS-GF"    : ( 1.15, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=ðŸ”¥ MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=ðŸ”¥ MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}

[gcode_macro _MODULE_CUSTOM1]
gcode:
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}

[include reshelper.cfg]

[danger_options]
allow_plugin_override: True



# [ringing_test]
# size: 50
# #   X-Y Size of tower footprint (mm)
# height: 60
# #   Height of of tower (mm)
# band: 5
# #   Height for each ringing step (mm)
# perimeters: 2
# #   Number of perimeters to be printed for the tower
# velocity: 100
# #   Is the velocity one must use as V in a formula V * N / D when
# #   calculating the resonance frequency. N and D are the number of
# #   oscillations and the distance between them as usual:
# brim_velocity: 30
# #   Speed for brim printing in (mm/s)
# accel_start: 10000
# #   The acceleration of the start of the test
# accel_step: 0
# #   The increment of the acceleration every `band` (mm/s^2)
# layer_height: 0.2
# first_layer_height: 0.25
# filament_diameter: 1.75

# [delayed_gcode start_ringing_test]

# gcode:
#     {% set vars = printer["gcode_macro RUN_RINGING_TEST"] %}
#     # Add your start GCode here, for example:

#     START_PRINT EXTRUDER_TEMP={vars.hotend_temp} BED_TEMP={vars.bed_temp} MATERIAL=ABS SIZE=76.7348_76.7348_123.265_123.265 INITIAL_TOOL=0 CHAMBER=0 SOAK=0
#     # G28
#     # M190 S{vars.bed_temp}
#     # M109 S{vars.hotend_temp}
#     SET_PRESSURE_ADVANCE ADVANCE=0
#     SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
#     M106 S255
#     {% set flow_percent = vars.flow_rate|float * 100.0 %}
#     {% if flow_percent > 0 %}
#     M221 S{flow_percent}
#     {% endif %}
#     {% set layer_height = vars.nozzle * 0.5 %}
#     {% set first_layer_height = layer_height * 1.25 %}
#     PRINT_RINGING_TOWER {vars.rawparams} LAYER_HEIGHT={layer_height} FIRST_LAYER_HEIGHT={first_layer_height} FINAL_GCODE_ID=end_ringing_test

# [delayed_gcode end_ringing_test]
# gcode:
#     END_PRINT

# [gcode_macro RUN_RINGING_TEST]
# variable_bed_temp: -1
# variable_hotend_temp: -1
# variable_nozzle: -1
# variable_flow_rate: -1
# variable_rawparams: ''
# gcode:
#     # Fail early if the required parameters are not provided
#     {% if params.NOZZLE is not defined %}
#     {action_raise_error('NOZZLE= parameter must be provided')}
#     {% endif %}
#     {% if params.TARGET_TEMP is not defined %}
#     {action_raise_error('TARGET_TEMP= parameter must be provided')}
#     {% endif %}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=bed_temp VALUE={params.BED_TEMP|default(60)}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=hotend_temp VALUE={params.TARGET_TEMP}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=nozzle VALUE={params.NOZZLE}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=flow_rate VALUE={params.FLOW_RATE|default(-1)}
#     SET_GCODE_VARIABLE MACRO=RUN_RINGING_TEST VARIABLE=rawparams VALUE="'{rawparams}'"
#     SAVE_GCODE_STATE NAME=RINGING_TEST_STATE
#     UPDATE_DELAYED_GCODE ID=start_ringing_test DURATION=0.01